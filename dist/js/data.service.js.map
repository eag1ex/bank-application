{"version":3,"names":[],"mappings":"","sources":["data.service.js"],"sourcesContent":["var app;\n(function (app) {\n    var data;\n    (function (data_1) {\n        'use strict';\n        var DataService = /** @class */ (function () {\n            /**\n             * api calls are initiated from here, we return cached defered promise after token registration,\n             * and every subsequent return of an existing user will return the cached devered object from welcome page\n             * accross to application page, all on save is not cashed until user return again.\n             * We make call to DB on every save and update the GLOBAL OBJECT\n             */\n            /* @ngInject */\n            DataService.$inject = [\"$http\", \"$q\", \"API\", \"$rootScope\"];\n            function DataService($http, $q, API, $rootScope) {\n                this.$http = $http;\n                this.$q = $q;\n                this.API = API;\n                this.$rootScope = $rootScope;\n                this.GLOBALS = {};\n            }\n            DataService.prototype.getCached = function () {\n                var deferred = this.$q.defer();\n                if (this.GLOBALS.form !== undefined) {\n                    console.info('getCached(), sending existing user data across');\n                    deferred.resolve(this.GLOBALS);\n                }\n                else {\n                    var msg = { error: true, message: \"cached data not found\" };\n                    deferred.reject(this.fail(msg));\n                }\n                return deferred.promise;\n            };\n            DataService.prototype.resetExisting = function () {\n                this.user_exists = '';\n            };\n            DataService.prototype.clearAllCache = function () {\n                this.GLOBALS = {};\n            };\n            DataService.prototype.checkDataRetention = function () {\n                var failed = false;\n                if (this.GLOBALS.token === undefined || !this.GLOBALS.token || this.GLOBALS.terms) {\n                    this.clearAllCache();\n                    failed = true;\n                    console.info('YOU ARE NOT VIALID', 'decline');\n                }\n                return failed;\n            };\n            /**\n             * updating GLOBALS and returning response\n             * sending data and and url var token\n             */\n            DataService.prototype.registerUser = function (tok) {\n                var _this = this;\n                if (tok === void 0) { tok = ''; }\n                console.log('window/URL', window);\n                var token = (tok) ? tok : this.GLOBALS.token;\n                if (!token || token === undefined) {\n                    return this.fail({ error: true, message: 'token not available, or undefined!' });\n                }\n                //    \n                return this.$http({\n                    url: this.API.URL + '/register/' + token,\n                    // url: 'api/register/' + token,\n                    method: \"POST\",\n                    data: {},\n                    headers: {\n                        'Function-Code': 'DFKJ884576*_35465fdjfuyrt+_*45@%_=_*56%@!~^',\n                        'Content-Type': 'application/json'\n                    }\n                })\n                    .then(function (response) {\n                    // just to update the token id display on dashboard\n                    _this.$rootScope.$emit(\"onDataChange\", true);\n                    // so we dont have to make another request on the application page, when coming from welcome page\n                    // only if user already exists\n                    _this.user_exists = response.data.userExists;\n                    var new_user = response.data.newUser;\n                    var success = response.data.success;\n                    /**\n                     * server validation returns invalid token response\n                     */\n                    if (response.data.invalidToken !== undefined) {\n                        if (response.data.invalidToken) {\n                            return { invalidToken: true };\n                        }\n                    }\n                    // user token found in database\n                    if (_this.user_exists === true) {\n                        console.info('user found in DB');\n                        _this.GLOBALS = response.data.data;\n                        return response.data;\n                    }\n                    // registering new user\n                    if (new_user && success && _this.user_exists !== true) {\n                        console.info('new user registered');\n                        _this.GLOBALS = response.data.data;\n                        return response.data;\n                    }\n                    else {\n                        _this.GLOBALS = undefined;\n                        return _this.fail(response, 'new and existing user undefined');\n                    }\n                }, function (response) {\n                    _this.GLOBALS = undefined;\n                    return _this.fail(response, 'server error');\n                });\n            };\n            /**\n             * updating existing data for every on step save request,\n             * and returning 'contactBranchNumber' and 'accountNumber' on the final/ ng-submit\n             */\n            DataService.prototype.onSave = function (data) {\n                var _this = this;\n                return this.$http({\n                    url: this.API.URL + '/update',\n                    //url: 'api/update',\n                    method: \"POST\",\n                    data: data,\n                    headers: {\n                        'Function-Code': 'DFKJ884576*_35465fdjfuyrt+_*45@%_=_*56%@!~^',\n                        'Content-Type': 'application/json'\n                    }\n                })\n                    .then(function (response) {\n                    var success = response.data.success;\n                    var failure = response.data.failure;\n                    if (success) {\n                        var d = response.data.data;\n                        // to be available on complete page\n                        _this.GLOBALS.accountNumber = d.form.accountNumber;\n                        _this.GLOBALS.contactBranchNumber = d.form.contactBranchNumber;\n                        if (d.form.final.valid === true) {\n                            _this.GLOBALS = d;\n                        }\n                        return response.data.data;\n                    }\n                    if (failure) {\n                        return _this.fail(response, 'failed to save data');\n                    }\n                    else {\n                        var msg = 'no succes or failure received';\n                        return _this.fail(data, msg);\n                    }\n                }, function (response) {\n                    return _this.fail(response, 'server error');\n                });\n            };\n            DataService.prototype.success = function (response) {\n                return { response: response, success: true };\n            };\n            DataService.prototype.fail = function (error, msg) {\n                if (msg === void 0) { msg = ''; }\n                if (!msg)\n                    msg = 'server error';\n                return { error: error, message: msg };\n            };\n            return DataService;\n        }());\n        data_1.DataService = DataService;\n        angular\n            .module('app.dataservice', []);\n        angular\n            .module('app.dataservice')\n            /* @ngInject */\n            .service('dataservice', DataService);\n    })(data = app.data || (app.data = {}));\n})(app || (app = {}));\n"],"file":"data.service.js"}