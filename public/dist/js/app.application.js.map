{"version":3,"names":[],"mappings":"","sources":["app.application.js"],"sourcesContent":["var app;\n(function (app) {\n    var application;\n    (function (application) {\n        'use strict';\n        var MainController = /** @class */ (function () {\n            /* @ngInject */\n            MainController.$inject = [\"$scope\", \"$element\", \"$document\", \"$timeout\", \"$q\", \"Form\", \"dataservice\", \"$state\", \"fileupload\", \"$location\"];\n            function MainController($scope, $element, $document, $timeout, $q, Form, dataservice, $state, fileupload, $location) {\n                var _this = this;\n                this.$scope = $scope;\n                this.$element = $element;\n                this.$document = $document;\n                this.$timeout = $timeout;\n                this.$q = $q;\n                this.Form = Form;\n                this.dataservice = dataservice;\n                this.$state = $state;\n                this.fileupload = fileupload;\n                this.$location = $location;\n                /**\n                 *\n                 * The APPFORM models are dynamicly created on the html template with ng-init,\n                 * when equired we merge it with appFormClass.\n                 *\n                 * The form name values use {common name space} for ease of use for example:\n                 * ngInit/ngModel=vm.APPFORM.one.homePhone  == name=homePhone\n                 * ngInit/ngModel=vm.APPFORM.one.homePhonePre == homePhonePre\n                 *\n                 * First we extend our APPFORM with appFormClass then we wait for new data if available,\n                 * for existing user we merge the object with new data.\n                 * We check for validation of each steps using checkFormStepsValid()\n                 * which tne calls initFormSteps() to make decision of the next form STEP.\n                 *\n                 * FUNCTION manualExecuteValidation() forces the uivalidation directive to reinitialize the ui.\n                 *\n                 */\n                this.APPFORM = {};\n                /**\n                 * we extend our APPFORM model dynamicly, and obj's are rendered on form ng-init\n                 */\n                var form = new Form(this.dataservice, this, this.APPFORM);\n                form.model().then(function (data) {\n                    _this.APPFORM = data;\n                }, function (err) {\n                    //  console.info(err);\n                });\n                this.fileNames = {\n                    utilityFile: '',\n                    securityFile: ''\n                };\n                this.sectionSaved = false;\n                this.finalSave = false;\n                /**\n                 * sending accross from directive,\n                 * update display text of uploaded file\n                 */\n                this.$scope.$on('uploadedFile', function (event, data) {\n                    if (data.name && data.file !== '') {\n                        _this.fileNames[data.name] = data.file;\n                    }\n                });\n            }\n            ;\n            /**\n             * once file is selected it is uploaded, and we check and validate last form step here\n             * to allow final ng-submit/ disabled to false.\n             */\n            MainController.prototype.uploadFile = function (vm, step, fieldName) {\n                var _this = this;\n                if (!vm || !step || !fieldName)\n                    return;\n                if (typeof this.APPFORM[step][fieldName] === 'string') {\n                    return;\n                }\n                this.fileupload.upload(vm).then(function (data) {\n                    if (data === false) {\n                        var uploadedFileName_1 = '';\n                        _this.fileNames[fieldName] = 'Allow only image, jpeg/png'; //hide description when we have file from server\n                        return;\n                    }\n                    if (!data.filename)\n                        return;\n                    var uploadedFileName = data.filename;\n                    _this.fileNames[fieldName] = ''; //hide description when we have file from server\n                    _this.APPFORM[step][fieldName] = uploadedFileName;\n                    // validate last step\n                    _this.checkFormStepsValid(step);\n                }, function (err) {\n                    console.log(err);\n                });\n            };\n            /**\n             * redirect to complete/:decision page, uppon form succession.\n             */\n            MainController.prototype.completeRedirectTo = function (decission) {\n                var _this = this;\n                var goTo = '';\n                if (decission === true)\n                    goTo = 'approved';\n                else\n                    goTo = 'declined';\n                this.$timeout(function () {\n                    //this.$state.go('complete',{goTo:goTo});\n                    _this.$location.path(\"app/application/\" + goTo);\n                }, 2000);\n            };\n            ;\n            /**\n             * on every subsequent / onSave we first perform new  object iterration to send to DB.\n             * we aldo update GLOBALS to display on complete page\n             */\n            MainController.prototype.dataToSave = function () {\n                // cleanup and save\n                var terms = this.dataservice.GLOBALS.terms;\n                var token = this.dataservice.GLOBALS.token;\n                //update globals\n                var approved = this.APPFORM.approved;\n                var accountNumber = (approved) ? this.APPFORM.accountNumber : '';\n                var contactBranchNumber = (!approved) ? this.APPFORM.contactBranchNumber : '';\n                this.dataservice.GLOBALS.approved = approved;\n                this.dataservice.GLOBALS.accountNumber = accountNumber;\n                this.dataservice.GLOBALS.contactBranchNumber = contactBranchNumber;\n                var updateVars = {\n                    tc: terms,\n                    approved: approved,\n                    accountNumber: accountNumber,\n                    contactBranchNumber: contactBranchNumber\n                };\n                var mergedForm = _.merge(this.APPFORM.data(), updateVars);\n                var dataToSave = Object.assign({}, { form: mergedForm }, { token: token });\n                console.info('dataToSave() iterrating now object to send to DB', dataToSave);\n                return dataToSave;\n            };\n            MainController.prototype.finalValidStep = function (step) {\n                return (this.APPFORM[step].valid && this.$scope.appForm.$valid && step === 'final');\n            };\n            /**\n             * We send information of every step/valid and completed to the db.\n             * uppon finalValidStep() true, we redirect to complete page.\n             * Server will return accountNumber and contactBranchNumber info on final POST success.\n             *\n             * onSave is executed from ng-submit on the final step, approve or decline\n             */\n            MainController.prototype.onSave = function (step) {\n                var _this = this;\n                if (step === void 0) { step = null; }\n                if (step !== null) {\n                    if (this.finalValidStep(step) === false) {\n                        return;\n                    }\n                }\n                var dataToSave = this.dataToSave();\n                this.sectionSaved = false;\n                this.finalSave = false;\n                this.dataservice.onSave(dataToSave).then(function (data) {\n                    if (!data)\n                        return;\n                    _this.sectionSaved = true;\n                    if (step !== null) {\n                        _this.finalSave = true;\n                        _this.completeRedirectTo(data.form.approved);\n                    }\n                    console.info('onSave(), data saved', data);\n                }, function (err) {\n                    console.info(err);\n                });\n            };\n            /**\n             * This function handles the received validation of each step, and transition to the next.\n             * On final step we do not execute onSave() here.\n             */\n            MainController.prototype.initFormSteps = function (data) {\n                if (data.resolution) {\n                    this.collapse(data.next, 'show');\n                    console.info('initFormSteps(), form step valid');\n                    // callback, for onSave\n                    if (data.onSave !== null && data.step !== 'final')\n                        data.onSave();\n                }\n                if (!data.resolution) {\n                    this.collapse(data.next, 'hide');\n                    console.info('initFormSteps(), invalid form elements', data.invals);\n                }\n            };\n            MainController.prototype.filesUploadedAre = function () {\n                return (this.fileNames.securityFile && this.fileNames.utilityFile);\n            };\n            /**\n             *  validation each step here, at this pont the APPFORM model has all the keys.\n             *  the $scope.appForm (form oject) has the same property keys as our APPFORM model,\n             *  so we match each step that gets executed and then validate it.\n             *  If keys of each input are returned as valid, then the step is valid.\n             */\n            MainController.prototype.checkFormStepsValid = function (step) {\n                var _this = this;\n                if (!step)\n                    return false;\n                var index = 0;\n                var elements = this.$scope.appForm;\n                var formValid = false;\n                var checkIndex = [];\n                var invalidElms = {};\n                for (var key in elements) {\n                    //only loop thru matching step\n                    if (key in this.APPFORM[step] && elements.hasOwnProperty(key)) {\n                        index++;\n                        formValid = false;\n                        checkIndex.push(elements[key].$valid);\n                        if (elements[key].$invalid === true) {\n                            invalidElms[key] = elements[key];\n                            formValid = false;\n                        }\n                        //bypass for final step, manual validation for upload fields\n                        if (step === 'final' && this.filesUploadedAre() === true) {\n                            formValid = true;\n                        }\n                        else if (step === 'final' && this.filesUploadedAre() === false) {\n                            formValid = false;\n                        }\n                    } //if\n                } //for\n                for (var i = 0; i < checkIndex.length; i++) {\n                    if (checkIndex[i] === false) {\n                        formValid = false;\n                        break;\n                    }\n                    else\n                        formValid = true;\n                }\n                if (formValid) {\n                    this.APPFORM[step].valid = true;\n                    var notFinalsave_1 = (step !== 'final');\n                    var data_1 = {\n                        step: step,\n                        resolution: true,\n                        next: this.APPFORM.nextClass(step),\n                        onSave: function () {\n                            return (notFinalsave_1 === true) ? _this.onSave() : false;\n                        }\n                    };\n                    this.initFormSteps(data_1);\n                    // show all valid field UI with the help of 'uivalidation' directive.    \n                    this.manualExecuteValidation(this.APPFORM[step].className);\n                } //if\n                if (!formValid) {\n                    this.APPFORM[step].valid = false;\n                    var data_2 = {\n                        \"step\": step, resolution: false,\n                        invals: invalidElms,\n                        next: this.APPFORM.nextClass(step),\n                        onSave: null\n                    };\n                    this.initFormSteps(data_2);\n                    this.manualExecuteValidation(this.APPFORM[step].className);\n                }\n            };\n            /**\n             * JQ jezz\n             * manually invoke the onchange event from uivalidation\n             */\n            MainController.prototype.manualExecuteValidation = function (el) {\n                /**\n                 * ==DOTOS\n                 * STILL MISSING THE 'SELECT' LOGIC\n                 */\n                var elm;\n                if ($(el).has('input').length > 0) {\n                    elm = $(el).find('.input-group>input');\n                    elm.change(function (el) {\n                        var orgVal = $(el.target).val();\n                        $(el.target).val(orgVal);\n                    }).change().off('change');\n                }\n                else {\n                    console.info('manualExecuteValidation', 'no selector');\n                    return;\n                }\n            };\n            /**\n             * collapse plugin part of bootstrap 4 alpha framework.\n             */\n            MainController.prototype.collapse = function (id, decission) {\n                var action = (decission === 'show') ? 'show' : 'hide';\n                $(id).collapse(action);\n            };\n            return MainController;\n        }());\n        application.MainController = MainController;\n        var MainComponent = /** @class */ (function () {\n            function MainComponent() {\n                this.restrict = 'E';\n                this.controllerAs = 'vm';\n                this.templateUrl = 'dist/js/app.application.html';\n                this.controller = MainController;\n            }\n            return MainComponent;\n        }());\n        angular\n            .module('app.application', []);\n        angular\n            .module('app.application').component('application', new MainComponent());\n    })(application = app.application || (app.application = {}));\n})(app || (app = {}));\n"],"file":"app.application.js"}