{"version":3,"names":[],"mappings":"","sources":["app.form.model.js"],"sourcesContent":["var app;\n(function (app) {\n    var formModel;\n    (function (formModel) {\n        var Form = /** @class */ (function () {\n            function Form(dataservice, _t, APPFORM) {\n                this.dataservice = dataservice;\n                this._t = _t;\n                this.APPFORM = APPFORM;\n            }\n            Form.prototype.model = function () {\n                var _this = this;\n                var _t = this._t;\n                if (!this.dataservice)\n                    return;\n                var appFormClass = function (val) {\n                    var _this = this;\n                    if (val === void 0) { val = 'one'; }\n                    this.one = { /*index: 9,*/ valid: null };\n                    this.two = { /*index: 4,*/ valid: null };\n                    this.three = { /*index: 3,*/ valid: null };\n                    this.final = { /*index: 1,*/ valid: null }; // inportant for server decission to not final save.\n                    this.update = function (d) {\n                        if (d === void 0) { d = _t.APPFORM; }\n                        var data = {\n                            one: Object.assign({}, d.one, { className: \".step-one\" }),\n                            two: Object.assign({}, d.two, { className: \".step-two\" }),\n                            three: Object.assign({}, d.three, { className: \".step-three\" }),\n                            final: Object.assign({}, d.final, { className: \".step-final\" })\n                        };\n                        console.info('Form.model.update() called');\n                        return data;\n                    };\n                    this.data = this.update;\n                    this.nextClass = function (v) {\n                        if (v === void 0) { v = val; }\n                        var next = 0;\n                        var data = _this.data();\n                        for (var key in data) {\n                            if (next === 1)\n                                return data[key].className;\n                            if (key === v)\n                                next++;\n                        }\n                    };\n                };\n                //initially anyway\n                this.APPFORM = _.merge(this.APPFORM, new appFormClass());\n                // at this point we retreive cached data\n                var deff = this.dataservice.getCached().then(function (data) {\n                    if (data.form !== undefined && Object.keys(data.form).length > 0) {\n                        _this.APPFORM = _.merge(_this.APPFORM, data.form);\n                    }\n                    return _this.APPFORM;\n                });\n                return deff;\n            };\n            return Form;\n        }());\n        formModel.Form = Form;\n        angular.module('app.formModel', []);\n        angular.module('app.formModel').factory('Form', function () {\n            return Form;\n        });\n    })(formModel = app.formModel || (app.formModel = {}));\n})(app || (app = {}));\n"],"file":"app.form.model.js"}