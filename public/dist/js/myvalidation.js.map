{"version":3,"names":[],"mappings":"","sources":["myvalidation.js"],"sourcesContent":["var app;\n(function (app) {\n    var uivalidation;\n    (function (uivalidation) {\n        'use strict';\n        var DirectiveController = /** @class */ (function () {\n            /* @ngInject */\n            DirectiveController.$inject = [\"$rootScope\"];\n            function DirectiveController($rootScope) {\n                this.$rootScope = $rootScope;\n            }\n            return DirectiveController;\n        }());\n        /**\n         * uivalidation=\"{field:appForm.firstName, has:'input'}\"\n         * This validator sits on the input-group element and checks for input and select changes\n         * It is a visual interpretor if/then errors accur.\n         * It binds and watches for chages\n         */\n        angular.module('app.uivalidation', []);\n        angular.module('app.uivalidation')\n            .directive(\"uivalidation\", function () {\n            return {\n                restrict: \"A\",\n                scope: {\n                    uivalidation: \"=\"\n                },\n                controller: DirectiveController,\n                link: function (scope, el, attrs, ctrl) {\n                    scope.$watch('uivalidation', function () {\n                        el.bind('change', function (event) {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            if (!el.hasClass('input-group')) {\n                                return;\n                            }\n                            var field = scope.uivalidation.field;\n                            var childSelector = scope.uivalidation.has;\n                            var bothValid = scope.uivalidation.bothValid;\n                            bothValid = (bothValid === undefined) ? true : bothValid;\n                            //classes\n                            var formClass = {\n                                fs: 'form-control-success',\n                                fd: 'form-control-danger',\n                                hd: 'has-danger',\n                                hs: 'has-success'\n                            };\n                            var message = function (isvalid) {\n                                var output;\n                                if (isvalid)\n                                    output = \"field is valid\";\n                                else\n                                    output = \"field is not valid\";\n                                return \"<small class=\\\"form-text text-muted hide\\\">\" + output + \"</small>\";\n                            };\n                            // if input is $valid\n                            if (field.$valid && bothValid !== false) {\n                                $(el).removeClass(formClass.hd);\n                                $(el).removeClass(formClass.hs).addClass(formClass.hs);\n                                angular.forEach(el.children(childSelector), function (value, inx) {\n                                    //ONLY LOOP IF WE HAVE 2 INPUTS OR SELECT\n                                    if (value.nodeName === 'INPUT' || value.nodeName === 'SELECT') {\n                                        $(value).removeClass(formClass.fd);\n                                        $(value).removeClass(formClass.fs).addClass(formClass.fs);\n                                    }\n                                });\n                            }\n                            // if input is $invalid\n                            if (field.$invalid || bothValid === false) {\n                                $(el).removeClass(formClass.hs);\n                                $(el).removeClass(formClass.hd).addClass(formClass.hd);\n                                angular.forEach(el.children(childSelector), function (value, inx) {\n                                    //ONLY LOOP IF WE HAVE 2 INPUTS OR SELECT\n                                    if (value.nodeName === 'INPUT' || value.nodeName === 'SELECT') {\n                                        $(value).removeClass(formClass.fs);\n                                        $(value).removeClass(formClass.fd).addClass(formClass.fd);\n                                    }\n                                });\n                            }\n                        }); //bind\n                    }); // $watch\n                } //link\n            };\n        });\n    })(uivalidation = app.uivalidation || (app.uivalidation = {}));\n})(app || (app = {}));\n"],"file":"myvalidation.js"}