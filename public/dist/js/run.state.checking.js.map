{"version":3,"names":[],"mappings":"","sources":["run.state.checking.js"],"sourcesContent":["var app;\n(function (app) {\n    var core;\n    (function (core) {\n        var stateChecking;\n        (function (stateChecking) {\n            'use strict';\n            var StateChecking = /** @class */ (function () {\n                /**\n                 * we have moved the functionaliti from the on .run to its seperate module, its more clear\n                 * of what is happening here.\n                 * we validate so only existing users with valid token can enter the particular states.\n                 * existing users is they approved the TC and saved at least first form step will ultimatly be\n                 * retidested from welcom to application page.\n                 */\n                /* @ngInject */\n                StateChecking.$inject = [\"dataservice\"];\n                function StateChecking(dataservice) {\n                    this.dataservice = dataservice;\n                }\n                StateChecking.prototype.run = function (e, toState, state, location) {\n                    if (this.dataservice === undefined) {\n                        console.info('this.dataservice not available');\n                        e.preventDefault();\n                        state.go('welcome');\n                    }\n                    //dataservice.GLOBALS\n                    if (this.dataservice.GLOBALS.form !== undefined && toState.name !== 'complete') {\n                        if (this.dataservice.GLOBALS.form.final.valid === true) {\n                            var decission = (this.dataservice.GLOBALS.form.approved === true) ? 'approved' : 'declined';\n                            e.preventDefault();\n                            state.go('complete', { decission: decission });\n                            console.info('you already completed the form');\n                        }\n                    }\n                    // if not registered,only allow on welcome page\n                    if (!this.dataservice.GLOBALS.token && toState.name !== \"welcome\") {\n                        e.preventDefault();\n                        state.go('welcome');\n                        console.info('you are not registered');\n                    }\n                    // if not registered,only allow on welcome page\n                    if (!this.dataservice.GLOBALS.token && toState.name !== \"welcome\") {\n                        e.preventDefault();\n                        state.go('welcome');\n                        console.info('you are not registered');\n                    }\n                    // if not registered do not let to TC page\n                    if (this.dataservice.GLOBALS.token && toState.name === \"welcome\") {\n                        e.preventDefault();\n                        state.go('terms');\n                        console.log('You have token, redirecting to terms');\n                    }\n                    // if terms are approved already skip to next application state.\n                    if (this.dataservice.GLOBALS.terms === true && toState.name === \"terms\") {\n                        e.preventDefault();\n                        state.go('application');\n                        console.log('You already accepted terms, redirecting to application');\n                    }\n                    // if terms not signed return and sing.\n                    if (toState.name === 'application') {\n                        if (this.dataservice.GLOBALS.terms === false || this.dataservice.GLOBALS.terms === undefined) {\n                            e.preventDefault();\n                            state.go('terms');\n                            console.log('terms not accepted');\n                        }\n                    }\n                };\n                return StateChecking;\n            }());\n            stateChecking.StateChecking = StateChecking;\n            angular\n                .module('app.core.stateChecking', []);\n            angular\n                .module('app.core.stateChecking')\n                /* @ngInject */\n                .service('stateChecking', StateChecking);\n        })(stateChecking = core.stateChecking || (core.stateChecking = {}));\n    })(core = app.core || (app.core = {}));\n})(app || (app = {}));\n"],"file":"run.state.checking.js"}